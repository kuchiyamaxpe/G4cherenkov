#ifndef B4TrackerHit_h
#define B4TrackerHit_h 1

#include "G4VHit.hh"
#include "G4THitsCollection.hh"
#include "G4Allocator.hh"
#include "G4ThreeVector.hh"
#include "tls.hh"

class B4TrackerHit : public G4VHit
{
public:
  B4TrackerHit();
  B4TrackerHit(const B4TrackerHit &);
  virtual ~B4TrackerHit();

  // operators
  const B4TrackerHit &operator=(const B4TrackerHit &);
  G4bool operator==(const B4TrackerHit &) const;

  inline void *operator new(size_t);
  inline void operator delete(void *);

  // methods from base class
  virtual void Draw();
  virtual void Print();

  // Set methods
  void SetTrackID(G4int track) { fTrackID = track; };
  void SetChamberNb(G4int chamb) { fChamberNb = chamb; };
  void SetEdep(G4double de) { fEdep = de; };
  void SetPos(G4ThreeVector xyz) { fPos = xyz; };

  // Get methods
  G4int GetTrackID() const { return fTrackID; };
  G4int GetChamberNb() const { return fChamberNb; };
  G4double GetEdep() const { return fEdep; };
  G4ThreeVector GetPos() const { return fPos; };

private:
  G4int fTrackID;
  G4int fChamberNb;
  G4double fEdep;
  G4ThreeVector fPos;
};

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

typedef G4THitsCollection<B4TrackerHit> B4TrackerHitsCollection;

extern G4ThreadLocal G4Allocator<B4TrackerHit> *B4TrackerHitAllocator;

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

inline void *B4TrackerHit::operator new(size_t)
{
  if (!B4TrackerHitAllocator)
    B4TrackerHitAllocator = new G4Allocator<B4TrackerHit>;
  return (void *)B4TrackerHitAllocator->MallocSingle();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

inline void B4TrackerHit::operator delete(void *hit)
{
  B4TrackerHitAllocator->FreeSingle((B4TrackerHit *)hit);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

#endif